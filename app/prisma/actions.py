# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Callable,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template actions.py.jinja --
import warnings

from . import types, errors
from ._types import BaseModelT


if TYPE_CHECKING:
    from .client import Client


class NoteActions:
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: 'Client', model: Type['models.Note']) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List['models.Note']:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.Note]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await Note.prisma().query_raw(
            'SELECT * FROM Note WHERE created_at = $1',
            datetime.datetime.utcnow(),
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional['models.Note']:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.Note
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await Note.prisma().query_first(
            'SELECT * FROM Note WHERE updated_at = $1',
            datetime.datetime.utcnow(),
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.NoteCreateInput,
        include: Optional[types.NoteInclude] = None
    ) -> 'models.Note':
        """Create a new Note record.

        Parameters
        ----------
        data
            Note record data
        include
            Specifies which relations should be loaded on the returned Note model

        Returns
        -------
        prisma.models.Note
            The created Note record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Note record from just the required fields
        note = await Note.prisma().create(
            data={
                # data to create a Note record
                'title': 'bbadfchfja',
                'notebook_id': 377401575,
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='mutation',
            method='createOne',
            model='Note',
            arguments={
                'data': data,
                'include': include,
            },
        )
        return self._model.parse_obj(resp['data']['result'])

    async def create_many(
        self,
        data: List[types.NoteCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple Note records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Note record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await Note.prisma().create_many(
            data=[
                {
                    # data to create a Note record
                    'title': 'ggciceaie',
                    'notebook_id': 1147902781,
                },
                {
                    # data to create a Note record
                    'title': 'cadfabfehe',
                    'notebook_id': 368800899,
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        resp = await self._client._execute(
            operation='mutation',
            method='createMany',
            model='Note',
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.NoteWhereUniqueInput,
        include: Optional[types.NoteInclude] = None
    ) -> Optional['models.Note']:
        """Delete a single Note record.

        Parameters
        ----------
        where
            Note filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Note model

        Returns
        -------
        prisma.models.Note
            The deleted Note record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        note = await Note.prisma().delete(
            where={
                'id': 1508029952,
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                operation='mutation',
                method='deleteOne',
                model='Note',
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return self._model.parse_obj(resp['data']['result'])

    async def find_unique(
        self,
        where: types.NoteWhereUniqueInput,
        include: Optional[types.NoteInclude] = None
    ) -> Optional['models.Note']:
        """Find a unique Note record.

        Parameters
        ----------
        where
            Note filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Note model

        Returns
        -------
        prisma.models.Note
            The found Note record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        note = await Note.prisma().find_unique(
            where={
                'id': 486256185,
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='query',
            method='findUnique',
            model='Note',
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return self._model.parse_obj(result)

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.NoteWhereInput] = None,
        cursor: Optional[types.NoteWhereUniqueInput] = None,
        include: Optional[types.NoteInclude] = None,
        order: Optional[Union[types.NoteOrderByInput, List[types.NoteOrderByInput]]] = None,
    ) -> List['models.Note']:
        """Find multiple Note records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Note records returned
        skip
            Ignore the first N results
        where
            Note filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Note model
        order
            Order the returned Note records by any field

        Returns
        -------
        List[prisma.models.Note]
            The list of all Note records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Note records
        notes = await Note.prisma().find_many(take=10)

        # find the first 5 Note records ordered by the id field
        notes = await Note.prisma().find_many(
            take=5,
            order={
                'id': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='query',
            method='findMany',
            model='Note',
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
            },
        )
        return [self._model.parse_obj(r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.NoteWhereInput] = None,
        cursor: Optional[types.NoteWhereUniqueInput] = None,
        include: Optional[types.NoteInclude] = None,
        order: Optional[Union[types.NoteOrderByInput, List[types.NoteOrderByInput]]] = None,
    ) -> Optional['models.Note']:
        """Find a single Note record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Note filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Note model
        order
            Order the returned Note records by any field

        Returns
        -------
        prisma.models.Note
            The first Note record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Note record ordered by the title field
        note = await Note.prisma().find_first(
            skip=1,
            order={
                'title': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='query',
            method='findFirst',
            model='Note',
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return self._model.parse_obj(result)

    async def update(
        self,
        data: types.NoteUpdateInput,
        where: types.NoteWhereUniqueInput,
        include: Optional[types.NoteInclude] = None
    ) -> Optional['models.Note']:
        """Update a single Note record.

        Parameters
        ----------
        data
            Note record data specifying what to update
        where
            Note filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Note model

        Returns
        -------
        prisma.models.Note
            The updated Note record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        note = await Note.prisma().update(
            where={
                'id': 1062517886,
            },
            data={
                # data to update the Note record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                operation='mutation',
                method='updateOne',
                model='Note',
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return self._model.parse_obj(resp['data']['result'])

    async def upsert(
        self,
        where: types.NoteWhereUniqueInput,
        data: types.NoteUpsertInput,
        include: Optional[types.NoteInclude] = None,
    ) -> 'models.Note':
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Note filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Note model

        Returns
        -------
        prisma.models.Note
            The created or updated Note record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        note = await Note.prisma().upsert(
            where={
                'id': 267834847,
            },
            data={
                'create': {
                    'id': 267834847,
                    'title': 'cadfabfehe',
                    'notebook_id': 368800899,
                },
                'update': {
                    'title': 'cadfabfehe',
                    'notebook_id': 368800899,
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='mutation',
            method='upsertOne',
            model='Note',
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return self._model.parse_obj(resp['data']['result'])

    async def update_many(
        self,
        data: types.NoteUpdateManyMutationInput,
        where: types.NoteWhereInput,
    ) -> int:
        """Update multiple Note records

        Parameters
        ----------
        data
            Note data to update the selected Note records to
        where
            Filter to select the Note records to update

        Returns
        -------
        int
            The total number of Note records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Note records
        total = await Note.prisma().update_many(
            data={
                'content': 'biabhbdai'
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            operation='mutation',
            method='updateMany',
            model='Note',
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.NoteWhereInput] = None,
        cursor: Optional[types.NoteWhereUniqueInput] = None,
    ) -> int:
        """Count the number of Note records present in the database

        Parameters
        ----------
        select
            Select the Note fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Note filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.NoteCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Note.prisma().count()

        # results: prisma.types.NoteCountAggregateOutput
        results = await Note.prisma().count(
            select={
                '_all': True,
                'notebook_id': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.NoteCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.NoteWhereInput] = None,
        cursor: Optional[types.NoteWhereUniqueInput] = None,
    ) -> types.NoteCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.NoteCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.NoteWhereInput] = None,
        cursor: Optional[types.NoteWhereUniqueInput] = None,
    ) -> Union[int, types.NoteCountAggregateOutput]:
        """Count the number of Note records present in the database

        Parameters
        ----------
        select
            Select the Note fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Note filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.NoteCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Note.prisma().count()

        # results: prisma.types.NoteCountAggregateOutput
        results = await Note.prisma().count(
            select={
                '_all': True,
                'created_at': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            operation='query',
            method='aggregate',
            model='Note',
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.NoteCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.NoteWhereInput] = None
    ) -> int:
        """Delete multiple Note records.

        Parameters
        ----------
        where
            Optional Note filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Note records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Note records
        total = await Note.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            operation='mutation',
            method='deleteMany',
            model='Note',
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.NoteScalarFieldKeys'],
        *,
        where: Optional['types.NoteWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.NoteAvgAggregateInput'] = None,
        sum: Optional['types.NoteSumAggregateInput'] = None,
        min: Optional['types.NoteMinAggregateInput'] = None,
        max: Optional['types.NoteMaxAggregateInput'] = None,
        having: Optional['types.NoteScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.NoteCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.NoteScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.NoteScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.NoteGroupByOutput']:
        """Group Note records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Note fields to group records by
        where
            Note filter to select records
        take
            Limit the maximum number of Note records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.NoteGroupByOutput]
            A list of dictionaries representing the Note record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Note records by updated_at values
        # and count how many records are in each group
        results = await Note.prisma().group_by(
            ['updated_at'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            operation='query',
            method='groupBy',
            model='Note',
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class NotebookActions:
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: 'Client', model: Type['models.Notebook']) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List['models.Notebook']:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.Notebook]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await Notebook.prisma().query_raw(
            'SELECT * FROM Notebook WHERE created_at = $1',
            datetime.datetime.utcnow(),
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional['models.Notebook']:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.Notebook
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await Notebook.prisma().query_first(
            'SELECT * FROM Notebook WHERE updated_at = $1',
            datetime.datetime.utcnow(),
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.NotebookCreateInput,
        include: Optional[types.NotebookInclude] = None
    ) -> 'models.Notebook':
        """Create a new Notebook record.

        Parameters
        ----------
        data
            Notebook record data
        include
            Specifies which relations should be loaded on the returned Notebook model

        Returns
        -------
        prisma.models.Notebook
            The created Notebook record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Notebook record from just the required fields
        notebook = await Notebook.prisma().create(
            data={
                # data to create a Notebook record
                'title': 'idghgaicb',
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='mutation',
            method='createOne',
            model='Notebook',
            arguments={
                'data': data,
                'include': include,
            },
        )
        return self._model.parse_obj(resp['data']['result'])

    async def create_many(
        self,
        data: List[types.NotebookCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple Notebook records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Notebook record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await Notebook.prisma().create_many(
            data=[
                {
                    # data to create a Notebook record
                    'title': 'fjfddhigg',
                },
                {
                    # data to create a Notebook record
                    'title': 'hjaecfifb',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        resp = await self._client._execute(
            operation='mutation',
            method='createMany',
            model='Notebook',
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.NotebookWhereUniqueInput,
        include: Optional[types.NotebookInclude] = None
    ) -> Optional['models.Notebook']:
        """Delete a single Notebook record.

        Parameters
        ----------
        where
            Notebook filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Notebook model

        Returns
        -------
        prisma.models.Notebook
            The deleted Notebook record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        notebook = await Notebook.prisma().delete(
            where={
                'id': 2111915288,
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                operation='mutation',
                method='deleteOne',
                model='Notebook',
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return self._model.parse_obj(resp['data']['result'])

    async def find_unique(
        self,
        where: types.NotebookWhereUniqueInput,
        include: Optional[types.NotebookInclude] = None
    ) -> Optional['models.Notebook']:
        """Find a unique Notebook record.

        Parameters
        ----------
        where
            Notebook filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Notebook model

        Returns
        -------
        prisma.models.Notebook
            The found Notebook record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        notebook = await Notebook.prisma().find_unique(
            where={
                'id': 1149758321,
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='query',
            method='findUnique',
            model='Notebook',
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return self._model.parse_obj(result)

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.NotebookWhereInput] = None,
        cursor: Optional[types.NotebookWhereUniqueInput] = None,
        include: Optional[types.NotebookInclude] = None,
        order: Optional[Union[types.NotebookOrderByInput, List[types.NotebookOrderByInput]]] = None,
    ) -> List['models.Notebook']:
        """Find multiple Notebook records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Notebook records returned
        skip
            Ignore the first N results
        where
            Notebook filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Notebook model
        order
            Order the returned Notebook records by any field

        Returns
        -------
        List[prisma.models.Notebook]
            The list of all Notebook records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Notebook records
        notebooks = await Notebook.prisma().find_many(take=10)

        # find the first 5 Notebook records ordered by the id field
        notebooks = await Notebook.prisma().find_many(
            take=5,
            order={
                'id': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='query',
            method='findMany',
            model='Notebook',
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
            },
        )
        return [self._model.parse_obj(r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.NotebookWhereInput] = None,
        cursor: Optional[types.NotebookWhereUniqueInput] = None,
        include: Optional[types.NotebookInclude] = None,
        order: Optional[Union[types.NotebookOrderByInput, List[types.NotebookOrderByInput]]] = None,
    ) -> Optional['models.Notebook']:
        """Find a single Notebook record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Notebook filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Notebook model
        order
            Order the returned Notebook records by any field

        Returns
        -------
        prisma.models.Notebook
            The first Notebook record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Notebook record ordered by the title field
        notebook = await Notebook.prisma().find_first(
            skip=1,
            order={
                'title': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='query',
            method='findFirst',
            model='Notebook',
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return self._model.parse_obj(result)

    async def update(
        self,
        data: types.NotebookUpdateInput,
        where: types.NotebookWhereUniqueInput,
        include: Optional[types.NotebookInclude] = None
    ) -> Optional['models.Notebook']:
        """Update a single Notebook record.

        Parameters
        ----------
        data
            Notebook record data specifying what to update
        where
            Notebook filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Notebook model

        Returns
        -------
        prisma.models.Notebook
            The updated Notebook record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        notebook = await Notebook.prisma().update(
            where={
                'id': 1644289366,
            },
            data={
                # data to update the Notebook record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                operation='mutation',
                method='updateOne',
                model='Notebook',
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return self._model.parse_obj(resp['data']['result'])

    async def upsert(
        self,
        where: types.NotebookWhereUniqueInput,
        data: types.NotebookUpsertInput,
        include: Optional[types.NotebookInclude] = None,
    ) -> 'models.Notebook':
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Notebook filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Notebook model

        Returns
        -------
        prisma.models.Notebook
            The created or updated Notebook record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        notebook = await Notebook.prisma().upsert(
            where={
                'id': 1388290519,
            },
            data={
                'create': {
                    'id': 1388290519,
                    'title': 'hjaecfifb',
                },
                'update': {
                    'title': 'hjaecfifb',
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='mutation',
            method='upsertOne',
            model='Notebook',
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return self._model.parse_obj(resp['data']['result'])

    async def update_many(
        self,
        data: types.NotebookUpdateManyMutationInput,
        where: types.NotebookWhereInput,
    ) -> int:
        """Update multiple Notebook records

        Parameters
        ----------
        data
            Notebook data to update the selected Notebook records to
        where
            Filter to select the Notebook records to update

        Returns
        -------
        int
            The total number of Notebook records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Notebook records
        total = await Notebook.prisma().update_many(
            data={
                'created_at': datetime.datetime.utcnow()
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            operation='mutation',
            method='updateMany',
            model='Notebook',
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.NotebookWhereInput] = None,
        cursor: Optional[types.NotebookWhereUniqueInput] = None,
    ) -> int:
        """Count the number of Notebook records present in the database

        Parameters
        ----------
        select
            Select the Notebook fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Notebook filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.NotebookCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Notebook.prisma().count()

        # results: prisma.types.NotebookCountAggregateOutput
        results = await Notebook.prisma().count(
            select={
                '_all': True,
                'updated_at': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.NotebookCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.NotebookWhereInput] = None,
        cursor: Optional[types.NotebookWhereUniqueInput] = None,
    ) -> types.NotebookCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.NotebookCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.NotebookWhereInput] = None,
        cursor: Optional[types.NotebookWhereUniqueInput] = None,
    ) -> Union[int, types.NotebookCountAggregateOutput]:
        """Count the number of Notebook records present in the database

        Parameters
        ----------
        select
            Select the Notebook fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Notebook filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.NotebookCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Notebook.prisma().count()

        # results: prisma.types.NotebookCountAggregateOutput
        results = await Notebook.prisma().count(
            select={
                '_all': True,
                'id': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            operation='query',
            method='aggregate',
            model='Notebook',
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.NotebookCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.NotebookWhereInput] = None
    ) -> int:
        """Delete multiple Notebook records.

        Parameters
        ----------
        where
            Optional Notebook filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Notebook records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Notebook records
        total = await Notebook.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            operation='mutation',
            method='deleteMany',
            model='Notebook',
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.NotebookScalarFieldKeys'],
        *,
        where: Optional['types.NotebookWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.NotebookAvgAggregateInput'] = None,
        sum: Optional['types.NotebookSumAggregateInput'] = None,
        min: Optional['types.NotebookMinAggregateInput'] = None,
        max: Optional['types.NotebookMaxAggregateInput'] = None,
        having: Optional['types.NotebookScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.NotebookCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.NotebookScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.NotebookScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.NotebookGroupByOutput']:
        """Group Notebook records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Notebook fields to group records by
        where
            Notebook filter to select records
        take
            Limit the maximum number of Notebook records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.NotebookGroupByOutput]
            A list of dictionaries representing the Notebook record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Notebook records by title values
        # and count how many records are in each group
        results = await Notebook.prisma().group_by(
            ['title'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            operation='query',
            method='groupBy',
            model='Notebook',
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]



def _select_fields(root: str, select: Mapping[str, Any]) -> str:
    """Helper to build a GraphQL selection string

    This is a work around until field selection is added to the query builder.
    """

    return root + ' {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))


from . import models
